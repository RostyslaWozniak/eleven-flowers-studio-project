generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Product {
    id           String               @id @default(uuid())
    slug         String               @unique()
    createdAt    DateTime             @default(now())
    updatedAt    DateTime             @updatedAt
    translations ProductTranslation[]
    prices       ProductPrice[]
    images       ProductImage[]
    collectionId String?
    collection   Collection?          @relation(fields: [collectionId], references: [id], onDelete: SetNull)
    cartItem     CartItem[]
    orderItem    OrderItem[]
    status       ProductStatus        @default(AVAILABLE)

    @@index([slug])
}

model ProductTranslation {
    id          String  @id @default(uuid())
    productId   String
    language    String
    name        String
    description String
    product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([productId, language])
}

model ProductPrice {
    id        String  @id @default(uuid())
    productId String
    size      String
    price     Int
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([productId, size]) // Ensures a product has unique price per size
}

model ProductImage {
    id        String  @id @default(uuid())
    productId String
    name      String  @default("image")
    url       String // URL to the image
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Collection {
    id           String                  @id @default(uuid())
    slug         String                  @unique()
    createdAt    DateTime                @default(now())
    updatedAt    DateTime                @updatedAt
    imageUrl     String                  @default("https://njmm8e6312.ufs.sh/f/mgG8Yp1X9p5v0Qj5FyUDxhnoKp8aAPubiYyHfqdCLRXFBstl")
    translations CollectionTranslation[] // Relation to CollectionTranslation
    products     Product[] // Relation to Products
}

model CollectionTranslation {
    id           String     @id @default(uuid())
    collectionId String
    language     String // e.g., 'en', 'pl', 'ru'
    name         String
    description  String?
    collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

    @@unique([collectionId, language]) // Ensures a collection has only one translation per language
}

model Cart {
    id        String     @id @default(uuid())
    items     CartItem[] // Relation to CartItem
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model CartItem {
    id        String   @id @default(uuid())
    cartId    String
    productId String
    size      String // To match ProductPrice
    quantity  Int      @default(1)
    price     Int? // Store price at the time of adding to the cart
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([cartId, productId, size]) // Prevents duplicate entries for the same product and size in a cart
}

model Order {
    id              String           @id @default(uuid())
    contactInfoId   String?
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    totalPrice      Int
    orderItems      OrderItem[]
    addressId       String?
    address         Address?         @relation(fields: [addressId], references: [id], onDelete: SetNull)
    deliveryDetails DeliveryDetails?
    paymentIntentId String?
    paymentStatus   PaymentStatus    @default(PENDING)
    contactInfo     ContactInfo?     @relation(fields: [contactInfoId], references: [id], onDelete: Cascade)
}

model OrderItem {
    id          String   @id @default(uuid())
    orderId     String
    productId   String
    productName String
    size        String
    quantity    Int      @default(1)
    imageUrl    String
    slug        String
    price       Int?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([orderId, productId, size])
}

model Address {
    id        String   @id @default(uuid())
    city      String
    street    String
    postCode  String
    order     Order[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([city, street, postCode])
}

model DeliveryDetails {
    id           String   @id @default(uuid())
    deliveryDate DateTime
    deliveryTime String
    method       String
    description  String?
    orderId      String?  @unique
    order        Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model ContactInfo {
    id                   String  @id @default(uuid())
    firsName             String?
    lastName             String?
    email                String  @unique
    phone                String? // Optional phone number
    wantsMarketingEmails Boolean @default(false) // Opt-in for marketing
    orders               Order[]
}

enum ProductStatus {
    AVAILABLE // Product can be purchased
    OUT_OF_STOCK // Temporarily unavailable
    DISCONTINUED // No longer sold
}

enum PaymentStatus {
    PENDING // Payment initiated but not completed
    SUCCESS // Payment confirmed by Stripe
    FAILED // Payment failed or was rejected
    REFUNDED // Payment refunded
}
